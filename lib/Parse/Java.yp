/*
	Java 1.5 compatible grammar
*/

/* Keywords */
%token PLUS_TK MINUS_TK MULT_TK DIV_TK
%token LS_TK RS_TK ZRS_TK
%token AND_TK XOR_TK OR_TK
%token BOOL_AND_TK BOOL_OR_TK
%token EQ_TK NEQ_TK GT_TK GTE_TK LT_TK LTE_TK
%token PLUS_ASSIGN_TK MINUS_ASSIGN_TK MULT_ASSIGN_TK DIV_ASSIGN_TK REM_ASSIGN_TK
%token LS_ASSIGN_TK RS_ASSIGN_TK ZRS_ASSIGN_TK
%token AND_ASSIGN_TK XOR_ASSIGN_TK OR_ASSIGN_TK

%token MODIFIER_TK
%token CLASS_TK EXTENDS_TK INTERFACE_TK

%start CompilationUnit

%{

use Carp qw(croak);

use Parse::Java::Class;
use Parse::Java::Document;
use Parse::Java::Element;
use Parse::Java::Interface;
use Parse::Java::PrimitiveType::Boolean;
use Parse::Java::PrimitiveType::Byte;
use Parse::Java::PrimitiveType::Double;
use Parse::Java::PrimitiveType::Float;
use Parse::Java::PrimitiveType::FloatingPointType;
use Parse::Java::PrimitiveType::Int;
use Parse::Java::PrimitiveType::IntegralType;
use Parse::Java::PrimitiveType::Long;
use Parse::Java::PrimitiveType::Short;
use Parse::Java::PrimitiveType;
use Parse::Java::ReferenceType::ArrayType;
use Parse::Java::ReferenceType::ClassOrInterfaceType;
use Parse::Java::ReferenceType::ClassType;
use Parse::Java::ReferenceType::InterfaceType;
use Parse::Java::ReferenceType;
use Parse::Java::Token;
use Parse::Java::Type;
use Parse::Java::TypeDecl;


%}

%%

Identifier:
		IDENTIFIER_TK						{ $_[1]; }
;

QualifiedIdentifier:
		Identifier DOT_TK QualifiedIdentifier	{ $_[1]->value("$_[1].$_[3]"); $_[1]; }
	|	Identifier								{ $_[1] }
;

/* Type referencing */
Type:
		PrimitiveType						{ $_[1]; }
	|	ReferenceType						{ $_[1]; }
;

PrimitiveType:
		NumericType		{ $_[1]; }
	|	BOOLEAN_TK		{ Parse::Java::PrimitiveType::Boolean->new({token => $_[1]}); }
;

NumericType:
		IntegralType		{ $_[1]; }
	|	FloatingPointType 	{ $_[1]; }
;

IntegralType:
		BYTE_TK				{ Parse::Java::PrimitiveType::Byte->new({ token => $_[1] }); }
	|	SHORT_TK			{ Parse::Java::PrimitiveType::Short->new({ token => $_[1] }); }
	|	INT_TK				{ Parse::Java::PrimitiveType::Int->new({ token => $_[1] }); }
	|	LONG_TK				{ Parse::Java::PrimitiveType::Long->new({ token => $_[1] }); }
	|	CHAR_TK				{ Parse::Java::PrimitiveType::Char->new({ token => $_[1] }); }
;

FloatingPointType:
		FLOAT_TK			{ Parse::Java::PrimitiveType::Float->new({ token => $_[1] }); }
	|	DOUBLE_TK			{ Parse::Java::PrimitiveType::Double->new({ token => $_[1] }); }
;

/* Reference types */
ReferenceType:
		ClassOrInterfaceType	{ $_[1]; }
	|	TypeVariable			{ $_[1]; }
	|	ArrayType				{ $_[1]; }
;

ClassOrInterfaceType:
		ClassType		{ $_[1]; }
	|	InterfaceType	{ $_[1]; }
;

ClassType:
		ClassTypeDeclSpecifier					{ $_[1]; }
	|	ClassTypeDeclSpecifier TypeArguments	{ $_[1]; }
;

InterfaceType:
		TypeDeclSpecifier					{ $_[1]; }
	|	TypeDeclSpecifier TypeArguments		{ $_[1]; }
;

ClassTypeDeclSpecifier:
		TypeName						{ 
			Parse::Java::ReferenceType::ClassType->new({
				type => $_[1],
			});
		}
	|	ClassType DOT_TK Identifier		{ 
			Parse::Java::ReferenceType::ClassType->new({
				type 		=> $_[3],
			 	parent_type => $_[1],
			});
		}
;

TypeName:
		TypeName DOT_TK Identifier				{ $_[1]->value("$_[1].$_[3]"); $_[1]; }
	|	Identifier								{ $_[1]; }
;

TypeVariable:
		Identifier								{ $_[1] }
;

ArrayType:
		Type OSB_TK CSB_TK						{ 
			Parse::Java::ReferenceType::ArrayType->new({
				parent_type => $_[1],
			});
		}
;

/* Type declarations */
TypeDeclarations:
		TypeDeclarations TypeDeclaration	{ push @{$_[1]}, $_[2]; $_[1]; }
	|	TypeDeclaration						{ [ $_[1] ] }
;
	
TypeDeclaration: 
		ClassDeclaration					{ $_[1]; }
	|	InterfaceDeclaration				{ $_[1]; }
	|	Modifiers ClassDeclaration			{ $_[2]->modifiers($_[1]); $_[2]; }
	|	Modifiers InterfaceDeclaration		{ $_[2]->modifiers($_[1]); $_[2]; }
;

ExtendsDeclaration:
		EXTENDS_TK ClassType				{  $_[2]; }
	|	#empty								
;

ClassDeclaration:
		CLASS_TK Identifier ExtendsDeclaration ClassBody	{
			Parse::Java::Class->new({
				name 	=> $_[2],
				extends => $_[3]
			});
		}
;
	
ClassBody:
		OCB_TK ClassBodyDeclaration CCB_TK
;

ClassBodyDeclaration: #empty
;

InterfaceDeclaration:
		INTERFACE_TK IDENTIFIER_TK ClassBody	{
			Parse::Java::Interface->new({
				name => $_[2]
			});
		}
;

Modifier:
		MODIFIER_TK		{ $_[1]; }
;

Modifiers:
		Modifiers Modifier		{ push @{$_[1]}, $_[2]; $_[1]; }
	|	#empty
;

/* Start rule */
CompilationUnit:  
		TypeDeclarations { 
			Parse::Java::Document->new({ 
				types => $_[1] 
			}); 
		}
;

%%

sub _error {
    my $self = shift;
    push @{$self->YYData->{ERRLINES}}, $self->YYData->{LINE};
}

our %Keyword = (
	abstract	    => 'MODIFIER_TK',
	const			=> 'MODIFIER_TK',
	final		    => 'MODIFIER_TK',
	native		    => 'MODIFIER_TK',
	private			=> 'MODIFIER_TK',
	protected 	    => 'MODIFIER_TK',
	public	 	    => 'MODIFIER_TK',
	static		    => 'MODIFIER_TK',
	strictfp		=> 'MODIFIER_TK',
	synchronized	=> 'MODIFIER_TK',
	transient		=> 'MODIFIER_TK',
	volatile		=> 'MODIFIER_TK',
	map { $_ => uc($_) . "_TK" } qw(
	continue    for         new          switch
	assert      default     if           package      
	boolean     do          goto         this
	break       double      implements   throw
	byte        else        import       throws
	case        enum        instanceof   return
	catch       extends     int          short
	char        interface   void 		 try
	class       finally     long               
	float       super       while
));

our %Separator = (
	'(' => 'OP_TK',
	')' => 'CP_TK',
	'{' => 'OCB_TK',
	'}' => 'CCB_TK',
	'[' => 'OSB_TK',
	']' => 'CSB_TK',
	';' => 'SC_TK',
	',' => 'C_TK',
	'.' => 'DOT_TK',
);

our %Operator = (
	# = and combination
	'=='   => 'EQ_TK',
	'='    => 'ASSIGN_TK',
	# > and combinations
	'>='   => 'GTE_TK',
	'>>>=' => 'ZRS_ASSIGN_TK',
	'>>>'  => 'ZRS_TK',
	'>>='  => 'RS_ASSIGN_TK',
	'>>'   => 'RS_TK',
	'>'    => 'GT_TK',
	# < and combinations
	'<='   => 'LTE_TK',
	'<<='  => 'LS_ASSIGN_TK',
	'<<'   => 'LS_TK',
	'<'    => 'LT_TK',
	# & and combinations
	'&&'   => 'BOOL_AND_TK',
	'&='   => 'AND_ASSIGN_TK',
	'&'    => 'AND_TK',
	# | and combinations
	'||'   => 'BOOL_OR_TK',
	'|='   => 'OR_ASSIGN_TK',
	'|'    => 'OR_TK',
	# + and combinations
	'++'   => 'INCR_TK',
	'+='   => 'PLUS_ASSIGN_TK',
	'+'    => 'PLUS_TK',
	# - and combinations
	'--'   => 'DECR_TK',
	'-='   => 'MINUS_ASSIGN_TK',
	'-'    => 'MINUS_TK',
	# * and combinations
	'*='   => 'MULT_ASSIGN_TK',
	'*'    => 'MULT_TK',
	# / and combinations
	'/='   => 'DIV_ASSIGN_TK',
	'/'    => 'DIV_TK',
	# ^ and combinations
	'^='   => 'XOR_ASSIGN_TK',
	'^'    => 'XOR_TK',
	# % and combinations
	'%='   => 'REM_ASSIGN_TK',
	'%'    => 'REM_TK',
	# ! and combinations
	'!='   => 'NEQ_ASSIGN_TK',
	'!'    => 'NEG_TK',
	# ?, : and ~
	'?'    => 'REL_QM_TK',
	':'    => 'REL_CL_TK',
	'~'    => 'NOT_TK',
);

our $ReturnWhitespace = 0;
our $ReturnComments = 0;

# Numeric stuff
my $DigitRe						= qr/\d/;
my $DecimalNumeralRe			= qr/0|[1-9]$DigitRe*/;
my $HexDigitRe					= qr/[0-9a-fA-F]/;
my $HexNumeralRe				= qr/0[xX]$HexDigitRe+/;
my $OctDigitRe					= qr/[0-7]/;
my $OctNumeralRe				= qr/0$OctDigitRe+/;
my $ExponentRe 					= qr/(?:[eE][+-]?\d+)/;
my $FloatTypeSuffixRe 			= qr/[fFdD]/;
my $IntegerTypeSuffixRe			= qr/[lL]/;
my $HexSignificandRe			= qr/0[xX](?:[0-9a-fA-F]+\.?|[0-9a-fA-F]*\.[0-9a-fA-F]+)/;
my $BinaryExponentIndicatorRe	= qr/[pP][+-]?\d+/; 

# Escape stuff
my $EscapeSequence				= qr/\\[btnfr"'\\0-7]|\\[0-3]?$OctDigitRe{2}/;

# Letter stuff

my $JavaLetterRe				= qr/\p{IsAlpha}|\$|_/;
my $JavaLetterOrDigitRe			= qr/\p{IsAlnum}|\$|_/;
my $IdentifierRe				= qr/$JavaLetterRe+$JavaLetterOrDigitRe*/;

sub _mk_token {
	my ($value, $line_no, $column) = @_;
	return Parse::Java::Token->new({
		value 	=> $value,
		line_no => $line_no,
		column 	=> $column
	});
}
sub _next_token {
    my $self = shift; 

	CHECK_TOKEN:
    for ($self->YYData->{INPUT}) {
		# We might end up with whitespace or comment as last token
		# which will redo and trigger exception if not handled here
		last CHECK_TOKEN unless $_;
		
		# Whitespace
        s/^([\040\011\014]|\015\012|\015|\012)// && do { 
			# Push whitespace to children list of current element
			if ($ReturnWhitespace) {
				return 'WHITESPACE_TK', _mk_token($1);
			}
			redo CHECK_TOKEN; 
		};
		
		# Singleline comments
		s!^//!! && do {
			s/^(.*)//; # Remove everything til next line
			if ($ReturnComments) {
				return 'COMMENT_TK', _mk_token($1);
			}
			redo CHECK_TOKEN;
		};
		
		# Multiline tokens
		s!^\/\*(.*?)\*/!!s && do {
			if ($ReturnComments) {
				return 'COMMENT_TK', _mk_token($1);
			}
			redo CHECK_TOKEN;
		};
				
		# Float and double literals
		(s/^( $DigitRe+ \. $DigitRe* $ExponentRe? ) ( $FloatTypeSuffixRe? )//x  ||
		 s/^( \. $DigitRe+			  $ExponentRe? ) ( $FloatTypeSuffixRe? )//x  ||
		 s/^( $DigitRe+		  		  $ExponentRe  ) ( $FloatTypeSuffixRe? )//x	 ||
		 s/^( $DigitRe+		  		  $ExponentRe? ) ( $FloatTypeSuffixRe  )//x  ||
		 s/^( $HexSignificandRe $BinaryExponentIndicatorRe ) ( $FloatTypeSuffixRe?  )//x
		) && do {
			# Might need to set distinct TK somewhere else
			return 'FP_TK', _mk_token($1);
		};

		# Integer literals
		(s/^( $HexNumeralRe )     ( $IntegerTypeSuffixRe? )//x		||
		 s/^( $OctNumeralRe )	  ( $IntegerTypeSuffixRe? )//x      ||
   		 s/^( $DecimalNumeralRe ) ( $IntegerTypeSuffixRe? )//x
		) && do {
			# Might need to set distinct TK somewhere else
			return 'INTEGRAL_TK', _mk_token($1);
		};
		
		# Character literals
		s/^'([^'\\']|$EscapeSequence)'// && do {
			return 'CHAR_TK', _mk_token($1);
		};
		
		# String literals
		s/^"((?:[^"\\]|$EscapeSequence)*)"// && do {
			return 'STRING_TK', _mk_token($1);
		};
		
		# Identifier and Keyword
		s/^($JavaLetterRe+$JavaLetterOrDigitRe*)//x && do {
			# Check if it's a keyword, otherwise it's probablly an identifier
			if (exists $Keyword{$1}) {
				return $Keyword{$1}, _mk_token($1);
			}
			
			# Might be a literal boolean
			return 'BOOL_TK', _mk_token($1) if $1 eq 'true' || $1 eq 'false';
			
			# Might be a null
			return 'NULL_TK', _mk_token($1) if $1 eq 'null';
			
			# Now it's an identifier
			return 'IDENTIFIER_TK', _mk_token($1);
		};
		
		# Separator
		s/^([\(\)\{\}\[\]\;\,\.])// && do {
			return $Separator{$1}, _mk_token($1);
		};
		
		# Operator
		s/^(\+\+|--|\?|:|~|&&|\|\|)// && do {
			return $Operator{$1}, _mk_token($1);
		};

		s/^(={1,2})// && do {
			return $Operator{$1}, _mk_token($1);
		};
		
		s/^((?:[\+\-\*\/\&\|\^\%\!]|<{1,2}|>{1,3})=?)// && do {
			return $Operator{$1}, _mk_token($1);
		};	
		
		croak "Ouch.. we shouldn't really end up here for '$_'";	
    }
    
    # Abort parsing whene we have no more
    return ('', _mk_token(undef)); 
}

sub _set_input {
	my $self = shift;
	my $input = shift;
	
	# TODO: replace Unicode escape sequence (\uNNNN) with utf8-character
	$self->YYData->{INPUT} = $input;
	
	1;
}

sub _run {
    my $self = shift;
	my %extra_args;
	if ($ENV{YAPP_DEBUG}) {
#		$extra_args{yydebug} = 0x1F;
	}
    return $self->YYParse(yylex => \&_next_token, yyerror => \&_error, %extra_args);
}

1;